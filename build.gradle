plugins {
	id 'java'
	//id 'checkstyle'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.ec4j.editorconfig' version '0.0.3'
}

group = 'com.mypetmanager'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

  annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
  implementation 'org.mapstruct:mapstruct:1.4.2.Final'
  implementation 'org.projectlombok:lombok'
	//annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
	
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	
	//spring
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'mysql:mysql-connector-java:8.0.23'
	implementation 'org.apache.commons:commons-lang3' 
	implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.0.1'
	
	// AOP
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	
	compileOnly "org.mapstruct:mapstruct:1.4.2.Final"
	//compileOnly 'org.projectlombzok:lombok'
	compileOnly 'org.projectlombok:lombok'
	
	// reflection
	implementation 'org.reflections:reflections:0.10.2'
	
	// queryDsl
	implementation 'com.querydsl:querydsl-apt:5.0.0:jakarta'

	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'org.projectlombok:lombok'
    //annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    
	
	// tracing
//	implementation 'io.opentelemetry:opentelemetry-sdk-common'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
	//implementation platform('io.micrometer:micrometer-tracing-bom:latest.release')
	//runtimeOnly 'io.micrometer:micrometer-registry-otlp'
	
	implementation 'io.micrometer:micrometer-tracing-bridge-otel'
  implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
  
//  implementation 'io.micrometer:micrometer-tracing'
//	implementation "io.micrometer:micrometer-tracing-bridge-otel"
//	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
//  implementation "io.opentelemetry:opentelemetry-exporter-otlp"
	//implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter")
	//implementation(platform("io.opentelemetry:opentelemetry-bom:1.34.1"))
    //implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:2.0.0-alpha"))
	//implementation("io.opentelemetry.instrumentation:opentelemetry-jdbc")
	
	//httpClient
  implementation 'org.apache.httpcomponents.client5:httpclient5'

	implementation 'com.google.protobuf:protobuf-java'
	
	// TEST
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl 설정부
// [3] Querydsl 설정부
def generated = 'src/main/generated'

// [4] querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// [5] java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// [6] gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}


//editorconfig {
//    excludes = ['build']
//}

// check.dependsOn editorconfigCheck

